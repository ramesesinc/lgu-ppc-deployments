import com.rameses.annotations.*;

class BuildingEvaluationWorkflowInterceptor {
	
	@Service("DateService")
	def dateSvc;

	@DataContext("building_evaluation_finding")
	def findingEm;

	@DataContext("vw_building_evaluation")
	def vwEvalEm;

	@DataContext("building_evaluation")
	def evalEm;

	@DataContext("vw_building_permit")
	def appEm;

	@DataContext("building_evaluation_type_role")
	def evalTypeRoleEm;

	@Service("BuildingEvaluationService")
	def bEvalSvc;
	

	@Before(pattern="WorkflowTaskService.fireDecision", eval="#{args[0].processname == 'building_evaluation' && args[0].name == 'check-has-revision' }" ) 
	public void checkHasRevision( def evt ) {
		def p = evt.args[0];
		boolean hasFinding = false;
		def c = findingEm.find([parentid: p.refid]).where("state = 2 AND supersederid IS NULL AND transmittalid IS NULL").select("c:{COUNT(*)}").val();
		if( c > 0 ) {
			hasFinding = true;
		}
		p.info = [hasfindings: hasFinding];
	}

	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_evaluation' && result.state == 'end' }") 
	public void checkAfterEnd( def evt ) {
		def p = evt.args[0];
		//check here if there are fees
		def list = evalEm.getDocsThatRequireFees( [evaluationid: p.refid ] );
		if(list) {
			throw new Exception("The ff. must have fees: \n" + list*.title.join("\n") );
		}
	}

	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_evaluation' && args[0].action == 'send-for-approval' }") 
	public void doSendForRevisionOrApprove( def evt ) {
		def p = evt.args[0];
		bEvalSvc.joinMainProcess( [refid: p.refid]  );
	}

	/************************************************************
	* Attach roles when opening or after signalling and starting
	*************************************************************/
	@After( pattern="WorkflowTaskService.(signal|start|findTask)", eval="#{ args[0].processname == 'building_evaluation' }" )
	public void customizeRole(  def evt ) {
		def r = evt.result;
		//get the corrected roles for this
		def typeid = vwEvalEm.find( [objid: r.refid ] ).select("typeid").val();
		def replaceRole = {state, itm->
			def rol = evalTypeRoleEm.find( [typeid: typeid, state: state ] ).first();
			if(rol) itm.role = rol.role;	
		}
		replaceRole( r.state, r );
		r.transitions.each { tran ->
			replaceRole( tran.to,  tran );
		}
	}

}