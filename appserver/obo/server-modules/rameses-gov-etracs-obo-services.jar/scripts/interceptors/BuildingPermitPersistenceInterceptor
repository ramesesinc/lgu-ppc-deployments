import com.rameses.annotations.*;
import java.rmi.server.*;

class BuildingPermitPersistenceInterceptor {
	
	@Service("OboAppRequirementService")
	def reqSvc;

	@Service("OboAppProfessionalService")
	def profSvc;

	@Service("OboAppDocService")
	def appDocSvc;

	@Service("OboAppService")
	def appSvc;

	@Service("OboConstructionCostRuleService")
	def costSvc;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@DataContext("building_permit")
	def appEm;

	@DataContext("building_permit_task")
	def appTaskEm;

	@DataContext("obo_control")
	def controlEm;

	@DataContext("vw_building_permit")
	def vwAppEm;

	@DataContext("obo_app_entity")
	def entityEm;

	@DataContext("obo_payment")
	def paymentEm;

	@DataContext("obo_app_fee")
	def feeEm;

	@DataContext("building_permit_rpu")
	def rpuEm;

	@Env
	def env;

	private def calcFixedCost( def app ) {
		if( app.apptype == null || app.totalfloorarea==null || app.occupancytype==null ) {
			def zapp = vwAppEm.find( [objid: app.objid ] ).select("apptype,totalfloorarea,occupancytype.*").first();
			if(app.apptype==null) app.apptype = zapp.apptype;
			if(app.totalfloorarea==null) app.totalfloorarea = zapp.totalfloorarea;
			if(app.occupancytype==null) app.occupancytype = zapp.occupancytype;
		}
		//calculate the cost first before receiving		
		def param = [:];
		param.app = [apptype:app.apptype, totalfloorarea:app.totalfloorarea];
		param.occupancytype = app.occupancytype;
		return costSvc.calc( param );
	}

	private def formatAddress( def addr ) {
		def lst = [];
		lst << [addr.unitno, addr.bldgno, addr.bldgname ].findAll{it!=null}.join(" ");
		lst << [addr.street, addr.subdivision ].findAll{it!=null}.join(",");
		lst << [addr.barangay?.name, addr.citymunicipality, addr.province ].findAll{it!=null}.join(",");
		return lst.findAll{it}.join(",");		
	}

	//fire the workflow to start the process
    private void startWorkflow( def app ) {
		def p = [:];
		p.processname = 'building_permit';
		p.refid = app.objid;
		p.startdate = dateSvc.getServerDate();
		p.info = app;
		p.assignee = [objid:env.USERID, name:env.FULLNAME];		
		wfSvc.start(p);
    }

    //create task
    private def saveTask( def app ) {
    	//add end application task
		def atask = [:];
		atask.refid = app.objid;
		atask.state =  app.task.state;
		atask.dtcreated = dateSvc.getServerDate();
		def tsk = appTaskEm.create( atask );
		appEm.find([objid:app.objid]).update( [taskid: tsk.taskid] );
		return tsk;
    }

    //create permit for capture
    private def savePermit( def app ) {
    	if(!app.permitno) return null;
    	def permit = [:];
    	permit.appid = app.objid;
    	permit.doctypeid = "BUILDING_PERMIT";	
    	permit.controlno = app.permitno;
    	permit.dtissued = app.permitdtissued;
    	permit.expirydate = app.permitexpirydate;
    	permit.state = 3;
    	return appDocSvc.createAndIssue( permit );
    }

    //save payment
    private def savePayment( def app ) {
    	if(!app.receiptno) return null;
		def pmt = [:];
		pmt.appid = app.objid;
		pmt.refno = app.receiptno;
		pmt.refdate = app.receiptdate;
		pmt.amount = app.amtpaid;
		pmt.reftype = "cashreceipt";
		pmt.voided = 0;
		return paymentEm.create( pmt );	
    }

    private void saveAppProfessionals( def app ) {
    	if(!app.ancillaries) return;
    	app.ancillaries.findAll{ it.designprofessional!=null || it.supervisor!=null }.each { anc->
			def p = [:];
			p.designprofessional =  anc.designprofessional ;
			p.supervisor =  anc.supervisor;
			p.doctypeid =  anc.permittypeid.toUpperCase();
			p.appid = app.objid;
			profSvc.addAppProfessional( p );
    	}
    }

	//save all documents that are auto create that does not exist above
    private void saveDocuments( def app ) {
    	//loop first all ancillaries
    	def doclist = [];
    	if(app.ancillaries) {
	    	app.ancillaries.each { anc->
	    		anc.doctypeid = anc.permittypeid.toUpperCase();
	    		anc.infos = app.infos.findAll{ it.parentid == anc.objid };
	    		doclist << anc;
	    	}
    	}
    	//loop next accessories
    	if(app.accessories) {
    		def z = [objid: app.objid+"_ACCESSORIES"];
    		z.doctypeid = 'ACCESSORIES';
    		def accInfos = [];		
			app.accessories.each { acc->
				def infos = app.infos.findAll{ it.parentid == acc.objid };
				accInfos.addAll( infos );
			}
			z.infos = accInfos;
			doclist << z;
    	}
    	appDocSvc.saveInitial(  [appid: app.objid, apptype: "building_permit", doclist: doclist]  );
    }

    private void saveEntities( def app ) {
    	if(!app.entities) return;
    	app.entities.each {
    		if( it.objid != app.applicantid ) {
				it.appid = app.objid;
				entityEm.create( it );    		
    		}
		}
    }

    private void saveRpus( def app ) {
		app.rpus.each {
			it.appid = app.objid;
			it.owner = [objid: it.ownerid ];
			rpuEm.create( it );
		}
    }

    private void saveRequirements( def app ) {
    	reqSvc.saveInitial( [apptype: 'building_permit', appid: app.objid ] );
    }

    private def getTxnType( def app ) {
    	def occupancytype = app.occupancytype;
		def txntype = 'COMPLEX';
		if (occupancytype.group.objid == 'A' && app.totalfloorarea <= 1500 && app.numfloors <= 3) 
			txntype = "SIMPLE";
		else if (occupancytype.group.objid == 'E' && app.totalfloorarea <= 1500 && app.numfloors <= 2) 
			txntype = "SIMPLE";
		else if (occupancytype.group.objid == 'F' && app.totalfloorarea <= 1500) 
			txntype = "SIMPLE";
		return txntype;	
    }

	@Before(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'building_permit' }")
	public void beforeCreateApplication(def evt) {
		def app = evt.args[0];
		if(!app.applicant) throw new Exception("Applicant is required");
		
		if(app.trackingno) {
			def orgno = env.ORGID;
			if( !app.trackingno.startsWith(orgno) ) {
				app.trackingno = orgno + "-" + app.trackingno;
			}
		}	

		app.objid = "BAPP" + new UID();
		app.doctypeid = "BUILDING_PERMIT";
		app.orgcode = env.ORGID;
		app.occupancytypeid = app.occupancytype?.objid;
		app.apptype = app.apptype?.toUpperCase();

		if(!app.location?.text) {
			app.location?.text = formatAddress( app.location );
		}

		//remove appid from applicant so it can be saved
		app.applicant.remove("appid");
		app.applicant = entityEm.create( app.applicant );
		app.applicantid = app.applicant.objid;

		//save the supervisor
		def supervisor = profSvc.saveProfessional( app.supervisor );		
		if(supervisor) app.supervisor = supervisor;

		app.createdby = [objid: env.USERID, name: env.FULLNAME];
		app.dtcreated = dateSvc.getServerDate();
		app.fixedcost = calcFixedCost( app ); 
		app.txntype = getTxnType( app );
	}

	@After(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'building_permit' }")
	public void afterCreateApplication(def evt) {
		def app = evt.args[0];
		def result = evt.result;

		//save appid of entity
		entityEm.find( [objid: app.applicant.objid ] ).update( [appid: app.objid] );

		if( app.txnmode == "CAPTURE" ) {
			saveTask( app );			
			if(!app.appno) {
				appSvc.assignAppno( [appid: app.objid ] );
			}	
			if( app.task.state == 'requirement-verification' ) {
				saveRequirements( app );
			}
			if( app.task.state != 'end') {
				saveDocuments( app );
			}
			savePermit( app );
			savePayment( app );
		}
		else {
			saveEntities( app );
			saveRpus( app );
			saveDocuments( app );
			saveAppProfessionals( app );	
			saveRequirements( app );		
			startWorkflow( app );
		}
	}

	//BUILDING PERMIT APPLICATION
	@Before(pattern="PersistenceService.update", eval="#{ args[0]._schemaname == 'building_permit' }")
	public void beforeUpdateApplication(def evt) {
		def app = evt.args[0];
		if( app.supervisor ) {
			app.supervisorid = app.supervisor.objid;
		}
		if( app.totalfloorarea ) {
			app.fixedcost = calcFixedCost( app );	
		}
		if( app.occupancytype?.objid  ) {
			app.occupancytypeid = app.occupancytype?.objid;
			app.fixedcost = calcFixedCost( app );		
		}
		if( app.applicant?.objid ) {
			entityEm.find( [objid: app.applicant.objid]).update( app.applicant );
		}
		if( app.location ) {
			app.location.text = formatAddress( app.location );
		}
	}

	@After(pattern="PersistenceService.read", eval="#{ args[0]._schemaname == 'vw_building_permit' }")
	public void afterOpenApplication(def evt) {
		def p = evt.args[0];
		def a = evt.result;
		a.occupancytype.title = a.occupancytype.title?.toUpperCase();

		//auto compute fees after opening:
		a.amount = feeEm.find([appid:a.objid]).select("c:{SUM(amount)}").val();
		a.payment = paymentEm.find([appid: a.objid ]).where("voided=0").orderBy("refdate DESC, refno DESC").first();
	}

	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'building_permit' }")
	public void beforeRemoveApp( def evt ) {
		def p = evt.args[0];
		def app = vwAppEm.find( [objid: p.objid]).first();
		if( app.txnmode == "CAPTURE") {
			//do nothing
		}
		else if( app.task.state != 'receiving') 
			throw new Exception("Application can only be removed in receiving state");

		def u = [appid: app.objid ];		
		appEm.find( [objid: app.objid ]).update( [applicantid: "{NULL}", taskid: "{NULL}" ] );
		rpuEm.find( u ).delete();
		entityEm.find( u ).delete();
		appTaskEm.find( [refid: app.objid] ).delete();

		appDocSvc.deleteDocuments( u );
		profSvc.deleteAppProfessionals( u );
		reqSvc.deleteRequirements( u );
	} 


}