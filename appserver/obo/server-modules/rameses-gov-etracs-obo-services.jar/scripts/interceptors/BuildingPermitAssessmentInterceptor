import com.rameses.annotations.*; 
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;

class BuildingPermitAssessmentInterceptor {
	
	@Service("BillingRuleService")
	def billingRuleSvc;

	@Service("DateService")
	def dateSvc;

	@Service("OboApplicationInfoService")
	def infoSvc;

	@DataContext("obo_itemaccount")
	def itemAcctEm;

	@DataContext("vw_building_permit")
	def vwAppEm;

	@DataContext("building_permit")
	def appEm;

	@DataContext("building_permit_doc")
	def subdocEm;

	@DataContext("building_permit_rpu")
	def rpuEm;

	private def doAssessment( def o ) {
		def req = [:];
		req.factBuilder = o.factBuilder;
		req.rulename = "oboassessment";
		req.params = [rulebame:"oboassessment"];
		req.include_items = false;

		def res = billingRuleSvc.execute( req );

		def items = [];
		res.billitems.findAll{ it.billcode && it.item == null && it.amount > 0 }.each {
			def p = itemAcctEm.find( [objid: it.billcode ] ).first();
			it.item = p;
			if(o.parentid) it.parentid = o.parentid;
			it.amtpaid = 0;
			it.appid = o.appid;
			it.sortorder = (p.sortorder == null ? 100 : p.sortorder);
			items << it;			
		};
		return items;	
	}

	@After(pattern="OboApplicationFeeService.getAssessment", eval="#{args[0]._schemaname == 'building_permit_fee' }")
	public void getBuildingAssessment( def evt ) {
		def o = evt.args[0];
		def result = evt.result;

		def vapp = vwAppEm.find( [objid: o.appid ] ).first();

		def occ = vapp.occupancytype;
		def infos = [];
		def factBuilder = new FactBuilder();
		factBuilder.facts << new BuildingInfo( vapp ); 
        factBuilder.facts << new OccupancyType( occ );

        def sd = subdocEm.find([objid: o.parentid ] ).first();	
		factBuilder.facts << new OboDocument( doctype: sd.doctype.objid );
		infos = infoSvc.getInfos( [parentid: o.parentid, _schemaname: "vw_building_permit_info" ] );
		infos.each {
			if( it.datatype == "decimal" ) 	    factBuilder.facts << new OboDecimalInfo(it);
			else if( it.datatype == "integer" ) factBuilder.facts <<new OboIntegerInfo(it);
			else if( it.datatype == "boolean" ) factBuilder.facts << new OboBooleanInfo(it);
			else if( it.datatype == "lookup" )  factBuilder.facts << new OboLookupInfo(it);
		}

		if( sd.doctype.objid == "RPT_DOC" ) {
			//add rpu counts
			def rpu = new RpuCount();
			rpu.byownercount = rpuEm.find( [appid: o.appid ] ).select("c:{COUNT( DISTINCT ownerid )}").val();
			rpu.totalcount = rpuEm.find( [appid: o.appid ] ).select("c:{COUNT(*)}").val();
			factBuilder.facts << rpu;
		}

        /*
		if( o.parentid ) {
			def sd = subdocEm.find([objid: o.parentid ] ).first();	
			//this is for subapplications
			factBuilder.facts << new OboDocument( doctype: sd.doctype.objid );
			infos = infoSvc.getInfos( [parentid: o.parentid, _schemaname: "vw_building_permit_info" ] );
		}
		else {
			//this is for applications
			infos = infoSvc.getInfos( [appid: o.appid, _schemaname: "vw_building_permit_info" ] );	
			//load count of RPUs
			def rpu = new RpuCount();
			rpu.byownercount = rpuEm.find( [appid: o.appid ] ).select("c:{COUNT( DISTINCT ownerid )}").val();
			rpu.totalcount = rpuEm.find( [appid: o.appid ] ).select("c:{COUNT(*)}").val();
			factBuilder.facts << rpu;
			factBuilder.facts << new OboDocument( doctype: "BUILDING_PERMIT" );
		}
		*/


		result.items = doAssessment( [appid: o.appid, parentid: o.parentid, factBuilder: factBuilder] );
	}	

}